# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Ching-Lung Chuang, 2015
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-06 00:17+0000\n"
"PO-Revision-Date: 2022-08-19 21:55+0800\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.1.1\n"
"X-Poedit-Bookmarks: -1,-1,-1,-1,-1,93,25,-1,-1,-1\n"

#: ../../faq/design.rst:3
msgid "Design and History FAQ"
msgstr "設計和歷史常見問題"

#: ../../faq/design.rst:6
msgid "Contents"
msgstr "目錄"

#: ../../faq/design.rst:11
msgid "Why does Python use indentation for grouping of statements?"
msgstr "為何 Python 使用縮排來把陳述式 (statement) 分組？"

#: ../../faq/design.rst:13
msgid ""
"Guido van Rossum believes that using indentation for grouping is extremely "
"elegant and contributes a lot to the clarity of the average Python program. "
"Most people learn to love this feature after a while."
msgstr ""
"吉多·范羅蘇姆相信用縮排來分組是極度優雅，且對於一般 Python 程式是乾淨俐落的。"
"大多數人很快也愛上了這項特色。"

#: ../../faq/design.rst:17
msgid ""
"Since there are no begin/end brackets there cannot be a disagreement between "
"grouping perceived by the parser and the human reader.  Occasionally C "
"programmers will encounter a fragment of code like this::"
msgstr ""
"因為這裡沒有用 begin/end 包夾區塊，所以語法分析器解析的分組和人理解的分組不會"
"有所歧異。偶爾 C 語言的程式人員會遇上像這樣的一段程式碼：\n"
"\n"
"::"

#: ../../faq/design.rst:26
msgid ""
"Only the ``x++`` statement is executed if the condition is true, but the "
"indentation leads many to believe otherwise.  Even experienced C programmers "
"will sometimes stare at it a long time wondering as to why ``y`` is being "
"decremented even for ``x > y``."
msgstr ""
"如果條件為真，只有 ``x++`` 陳述句會被執行，但縮排會讓很多人對他有不同的理解。"
"即使是資深的 C 語言開發者有時也會盯著他許久，思考為何即便 ``x > y``，但 "
"``y`` 還是減少了。"

#: ../../faq/design.rst:31
msgid ""
"Because there are no begin/end brackets, Python is much less prone to coding-"
"style conflicts.  In C there are many different ways to place the braces. "
"After becoming used to reading and writing code using a particular style, it "
"is normal to feel somewhat uneasy when reading (or being required to write) "
"in a different one."
msgstr ""
"因為沒有 begin/end 括號，Python 比起其他語言會更不容易遇到程式碼風格的衝突。"
"在 C 語言中，有多種不同的方法來放置花括號。在習慣讀寫特定風格後，去讀（或是必"
"須去寫）另一種風格會覺得不太舒服。"

#: ../../faq/design.rst:38
msgid ""
"Many coding styles place begin/end brackets on a line by themselves.  This "
"makes programs considerably longer and wastes valuable screen space, making "
"it harder to get a good overview of a program.  Ideally, a function should "
"fit on one screen (say, 20--30 lines).  20 lines of Python can do a lot more "
"work than 20 lines of C.  This is not solely due to the lack of begin/end "
"brackets -- the lack of declarations and the high-level data types are also "
"responsible -- but the indentation-based syntax certainly helps."
msgstr ""
"很多程式碼風格會把 begin/end 獨立放在一行。這會讓程式碼很長且浪費珍貴的螢幕空"
"間，要概覽程式時也變得較為困難。理想上來說，一個函式應該要佔一個螢幕（大概 "
"20 至 30 行）。20 行的 Python 程式碼比起 20 行的 C 程式碼可以做更多事。這不單"
"單只是沒有 begin/end 括號 ── 也因為沒有變數宣告及高階的資料型別 ── 但縮排式的"
"語法確實給了幫助。"

#: ../../faq/design.rst:48
msgid "Why am I getting strange results with simple arithmetic operations?"
msgstr "為何我會從簡單的算術運算中得到奇怪的結果？"

#: ../../faq/design.rst:50
msgid "See the next question."
msgstr "請見下一個問題。"

#: ../../faq/design.rst:54
msgid "Why are floating-point calculations so inaccurate?"
msgstr "為何浮點數運算如此不精確？"

#: ../../faq/design.rst:56
msgid "Users are often surprised by results like this::"
msgstr ""
"使用者常常對這種結果感到驚訝：\n"
"\n"
"::"

#: ../../faq/design.rst:61
msgid ""
"and think it is a bug in Python.  It's not.  This has little to do with "
"Python, and much more to do with how the underlying platform handles "
"floating-point numbers."
msgstr ""
"然後認為這是 Python 的 bug。但這並不是。這跟 Python 幾乎沒有關係，而是和底層"
"如何處理浮點數有關係。"

#: ../../faq/design.rst:65
msgid ""
"The :class:`float` type in CPython uses a C ``double`` for storage.  A :"
"class:`float` object's value is stored in binary floating-point with a fixed "
"precision (typically 53 bits) and Python uses C operations, which in turn "
"rely on the hardware implementation in the processor, to perform floating-"
"point operations. This means that as far as floating-point operations are "
"concerned, Python behaves like many popular languages including C and Java."
msgstr ""
"CPython 的 :class:`float` 型別使用了 C 的 ``double`` 型別來儲存。一個 class:"
"`float` 物件的值會以固定的精度（通常為 53 位元）存為二進制浮點數，Python 使"
"用 C 來運算浮點數，而他的結果會依處理器中的硬體實作方式來決定。這表示就浮點數"
"運算來說，Python 和 C、Java 等很多受歡迎的語言有一樣的表現。"

#: ../../faq/design.rst:72
msgid ""
"Many numbers that can be written easily in decimal notation cannot be "
"expressed exactly in binary floating-point.  For example, after::"
msgstr ""
"很多數字可以簡單地寫成十進位表示，但卻無法簡單地變成二進制表示。比方說，在以"
"下程式碼執行後：\n"
"\n"
"::"

#: ../../faq/design.rst:77
msgid ""
"the value stored for ``x`` is a (very good) approximation to the decimal "
"value ``1.2``, but is not exactly equal to it.  On a typical machine, the "
"actual stored value is::"
msgstr ""
"``x`` 裡的值是一個（很接近）1.2 的估計值，但並非精確地等於 1.2。以一般的電腦"
"來說，他實際儲存的值是：\n"
"\n"
"::"

#: ../../faq/design.rst:83
msgid "which is exactly::"
msgstr ""
"而這個值正是：\n"
"\n"
"::"

#: ../../faq/design.rst:87
msgid ""
"The typical precision of 53 bits provides Python floats with 15--16 decimal "
"digits of accuracy."
msgstr "53 位元的精度讓 Python 可以有 15 至 16 小數位的準確度。"

#: ../../faq/design.rst:90
msgid ""
"For a fuller explanation, please see the :ref:`floating point arithmetic "
"<tut-fp-issues>` chapter in the Python tutorial."
msgstr ""
"要更完全的解釋可以查閱在 Python 教學的\\ :ref:`浮點運算 <tut-fp-issues>`\\ 一"
"章。"

#: ../../faq/design.rst:95
msgid "Why are Python strings immutable?"
msgstr "為什麼 Python 字符串不可變動？"

#: ../../faq/design.rst:97
msgid "There are several advantages."
msgstr "有許多優點。"

#: ../../faq/design.rst:99
msgid ""
"One is performance: knowing that a string is immutable means we can allocate "
"space for it at creation time, and the storage requirements are fixed and "
"unchanging.  This is also one of the reasons for the distinction between "
"tuples and lists."
msgstr ""
"其一是效能：知道字串不可變動後，我們就可以在創造他的時候就分配好空間，而後他"
"的儲存空間需求就是固定不變的。這也是值組 (tuples) 和列表 (lists) 相異的其中一"
"個原因。"

#: ../../faq/design.rst:104
msgid ""
"Another advantage is that strings in Python are considered as \"elemental\" "
"as numbers.  No amount of activity will change the value 8 to anything else, "
"and in Python, no amount of activity will change the string \"eight\" to "
"anything else."
msgstr ""
"另一個優點是在 python 中，字串和數字一樣「基本」。沒有任何行為會把 8 這個數值"
"改成其他數值；同理，在 Python 中也沒有任何行為會修改字串「eight」。"

#: ../../faq/design.rst:112
msgid "Why must 'self' be used explicitly in method definitions and calls?"
msgstr "為何「self」在方法 (method) 定義和呼叫時一定要明確使用？"

#: ../../faq/design.rst:114
msgid ""
"The idea was borrowed from Modula-3.  It turns out to be very useful, for a "
"variety of reasons."
msgstr "此構想從 Modula-3 而來。因為許多原因，他可以說是非常實用。"

#: ../../faq/design.rst:117
msgid ""
"First, it's more obvious that you are using a method or instance attribute "
"instead of a local variable.  Reading ``self.x`` or ``self.meth()`` makes it "
"absolutely clear that an instance variable or method is used even if you "
"don't know the class definition by heart.  In C++, you can sort of tell by "
"the lack of a local variable declaration (assuming globals are rare or "
"easily recognizable) -- but in Python, there are no local variable "
"declarations, so you'd have to look up the class definition to be sure.  "
"Some C++ and Java coding standards call for instance attributes to have an "
"``m_`` prefix, so this explicitness is still useful in those languages, too."
msgstr ""
"第一，這樣可以更明顯表現出你在用方法 (method) 或是實例 (instance) 的屬性，而"
"非一個區域變數。即使不知道類別 (class) 的定義，當看到 ``self.x`` 或 ``self."
"meth()``，就會很清楚地知道是正在使用實例的變數或是方法。在 C++ 裡，你可以藉由"
"沒有區域變數宣告來判斷這件事 ── 但在 Python 裡沒有區域變數宣告，所以你必須去"
"看類別的定義來確定。有些 C++ 和 Java 的程式碼規格要求要在實例屬性的名稱加上前"
"綴 ``m_``，所以這種明確性在那些語言也是很好用的。"

#: ../../faq/design.rst:127
msgid ""
"Second, it means that no special syntax is necessary if you want to "
"explicitly reference or call the method from a particular class.  In C++, if "
"you want to use a method from a base class which is overridden in a derived "
"class, you have to use the ``::`` operator -- in Python you can write "
"``baseclass.methodname(self, <argument list>)``.  This is particularly "
"useful for :meth:`__init__` methods, and in general in cases where a derived "
"class method wants to extend the base class method of the same name and thus "
"has to call the base class method somehow."
msgstr ""
"第二，當你想明確地使用或呼叫在某個類別裡的方法的時候，你不需要特殊的語法。在 "
"C++ 裡，如果你想用一個在繼承類別時被覆寫的基底類別方法，必須要用 ``::`` 運算"
"子 -- 但在 Python 裡，你可以直接寫成 ``baseclass.methodname(self, <argument "
"list>)``。這在 :meth:`__init__` 方法很好用，特別是在一個繼承的類別要擴充基底"
"類別的方法而要呼叫他時。"

#: ../../faq/design.rst:136
msgid ""
"Finally, for instance variables it solves a syntactic problem with "
"assignment: since local variables in Python are (by definition!) those "
"variables to which a value is assigned in a function body (and that aren't "
"explicitly declared global), there has to be some way to tell the "
"interpreter that an assignment was meant to assign to an instance variable "
"instead of to a local variable, and it should preferably be syntactic (for "
"efficiency reasons).  C++ does this through declarations, but Python doesn't "
"have declarations and it would be a pity having to introduce them just for "
"this purpose.  Using the explicit ``self.var`` solves this nicely.  "
"Similarly, for using instance variables, having to write ``self.var`` means "
"that references to unqualified names inside a method don't have to search "
"the instance's directories.  To put it another way, local variables and "
"instance variables live in two different namespaces, and you need to tell "
"Python which namespace to use."
msgstr ""
"最後，他解決了關於實例變數指派的語法問題：因為區域變數在 Python 是（定義為）"
"在函數內被指派值的變數（且沒有被明確宣告成全域），所以會需要一個方法來告訴直"
"譯器這個指派運算是針對實例變數，而非針對區域變數，這在語法層面處理較好（為了"
"效率）。C++ 用宣告解決了這件事，但 Python 沒有，而為了這個原因而引入變數宣告"
"機制又略嫌浪費。但使用明確的 ``self.var`` 就可以把這個問題圓滿解決。同理，在"
"用實例變數的時候必須寫成 ``self.var`` 即代表對於在方法中不特定的名稱不需要去"
"看實例的內容。換句話說，區域變數和實例變數存在於兩個不同的命名空間 "
"(namespace)，而你需要告訴 Python 要使用哪一個。"

#: ../../faq/design.rst:154
msgid "Why can't I use an assignment in an expression?"
msgstr "為何我不能在運算式 (expression) 中使用指派運算？"

#: ../../faq/design.rst:156
msgid "Starting in Python 3.8, you can!"
msgstr "從 Python 3.8 開始，你可以這麼做了！"

#: ../../faq/design.rst:158
msgid ""
"Assignment expressions using the walrus operator `:=` assign a variable in "
"an expression::"
msgstr ""
"指派運算式使用海象運算子 `:=` 來在運算式中指派變數值：\n"
"\n"
"::"

#: ../../faq/design.rst:164
msgid "See :pep:`572` for more information."
msgstr "更多資訊請見 :pep:`572`\\ 。"

#: ../../faq/design.rst:169
msgid ""
"Why does Python use methods for some functionality (e.g. list.index()) but "
"functions for other (e.g. len(list))?"
msgstr ""
"為何 Python 對於一些功能實作使用方法（像是 list.index()），另一些使用函式（像"
"是 len(list)）？"

#: ../../faq/design.rst:171
msgid "As Guido said:"
msgstr "如吉多所說："

#: ../../faq/design.rst:173
msgid ""
"(a) For some operations, prefix notation just reads better than postfix -- "
"prefix (and infix!) operations have a long tradition in mathematics which "
"likes notations where the visuals help the mathematician thinking about a "
"problem. Compare the easy with which we rewrite a formula like x*(a+b) into "
"x*a + x*b to the clumsiness of doing the same thing using a raw OO notation."
msgstr ""
"（一） 對一些運算來說，前綴寫法看起來會比後綴寫法好 ── 前綴（和中綴！）運算在"
"數學上有更久遠的傳統，這些符號在視覺上幫助數學家們更容易思考問題。想想把 x*(a"
"+b) 這種式子展開成 x*a+x*b 的簡單，再比較一下古老的圈圈符號記法的笨拙就知道"
"了。"

#: ../../faq/design.rst:180
msgid ""
"(b) When I read code that says len(x) I *know* that it is asking for the "
"length of something. This tells me two things: the result is an integer, and "
"the argument is some kind of container. To the contrary, when I read x."
"len(), I have to already know that x is some kind of container implementing "
"an interface or inheriting from a class that has a standard len(). Witness "
"the confusion we occasionally have when a class that is not implementing a "
"mapping has a get() or keys() method, or something that isn't a file has a "
"write() method."
msgstr ""
"（二） 當我看到一段程式碼寫著 len(x)，我*知道*他要找某個東西的長度。這告訴了"
"我兩件事：結果是一個整數、參數是某種容器。相對地，當我看到 x.len()，我必須先"
"知道 x 是某種容器，並實作了一個介面或是繼承了一個有標準 len() 的類別。遇到一"
"個沒有實作映射 (mapping) 的類別卻有 get() 或 keys() 方法，或是不是檔案但卻有 "
"write() 方法時，我們偶爾會覺得困惑。"

#: ../../faq/design.rst:189
msgid "https://mail.python.org/pipermail/python-3000/2006-November/004643.html"
msgstr ""
"https://mail.python.org/pipermail/python-3000/2006-November/004643.html"

#: ../../faq/design.rst:193
msgid "Why is join() a string method instead of a list or tuple method?"
msgstr "為何 join() 是字串方法而非串列 (list) 或值組 (tuple) 方法？"

#: ../../faq/design.rst:195
msgid ""
"Strings became much more like other standard types starting in Python 1.6, "
"when methods were added which give the same functionality that has always "
"been available using the functions of the string module.  Most of these new "
"methods have been widely accepted, but the one which appears to make some "
"programmers feel uncomfortable is::"
msgstr ""
"自 Python 1.6 之後，字串變得很像其他標準的型別，也在此時，一些可以和字串模組"
"的函式有相同功能的方法也被加入。大多數的新方法都被廣泛接受，但有一個方法似乎"
"讓一些程式人員不舒服：\n"
"\n"
"::"

#: ../../faq/design.rst:203
msgid "which gives the result::"
msgstr ""
"結果是：\n"
"\n"
"::"

#: ../../faq/design.rst:207
msgid "There are two common arguments against this usage."
msgstr "通常有兩個反對這個用法的論點。"

#: ../../faq/design.rst:209
msgid ""
"The first runs along the lines of: \"It looks really ugly using a method of "
"a string literal (string constant)\", to which the answer is that it might, "
"but a string literal is just a fixed value. If the methods are to be allowed "
"on names bound to strings there is no logical reason to make them "
"unavailable on literals."
msgstr ""
"第一項這麼說：「用字串文本（字串常數）看起來真的很醜」，也許真的如此，但字串"
"文本就只是一個固定值。如果方法可以用在值為字串的變數上，那沒道理字串文本不能"
"被使用。"

#: ../../faq/design.rst:215
msgid ""
"The second objection is typically cast as: \"I am really telling a sequence "
"to join its members together with a string constant\".  Sadly, you aren't.  "
"For some reason there seems to be much less difficulty with having :meth:"
"`~str.split` as a string method, since in that case it is easy to see that ::"
msgstr ""
"第二個反對意見通常是：「我是在叫一個序列把它的成員用一個字串常數連接起來」。"
"但很遺憾地，你並不是在這樣做。因為某種原因，把 :meth:`~str.split` 當成字串方"
"法比較簡單，因為這樣我們可以輕易地看到：\n"
"\n"
"::"

#: ../../faq/design.rst:222
msgid ""
"is an instruction to a string literal to return the substrings delimited by "
"the given separator (or, by default, arbitrary runs of white space)."
msgstr ""
"這是在叫一個字串文本回傳由指定的分隔符號（或是預設為空白）分出的子字串的指"
"令。"

#: ../../faq/design.rst:225
msgid ""
":meth:`~str.join` is a string method because in using it you are telling the "
"separator string to iterate over a sequence of strings and insert itself "
"between adjacent elements.  This method can be used with any argument which "
"obeys the rules for sequence objects, including any new classes you might "
"define yourself. Similar methods exist for bytes and bytearray objects."
msgstr ""
":meth:`~str.join` 是一個字串方法，因為再用他的時候，你是告訴分隔字串去走遍整"
"個字串序列，並將自己插入到相鄰的兩項之間。這個方法的參數可以是任何符合序列規"
"則的物件，包括自定義的新類別。在 bytes 和 bytearray 物件也有類似的方法可用。"

#: ../../faq/design.rst:233
msgid "How fast are exceptions?"
msgstr "例外處理有多快？"

#: ../../faq/design.rst:235
msgid ""
"A try/except block is extremely efficient if no exceptions are raised.  "
"Actually catching an exception is expensive.  In versions of Python prior to "
"2.0 it was common to use this idiom::"
msgstr ""
"如果沒有例外被丟出，一個 try/except 區塊是非常有效率的。事實上，抓捕例外要付"
"出昂貴的代價。在 Python 2.0 以前，這樣使用是相當常見的：\n"
"\n"
"::"

#: ../../faq/design.rst:245
msgid ""
"This only made sense when you expected the dict to have the key almost all "
"the time.  If that wasn't the case, you coded it like this::"
msgstr ""
"這只有在你預料這個字典大多數時候都有鍵的時候才合理。如果並非如此，你應該寫"
"成：\n"
"\n"
"::"

#: ../../faq/design.rst:253
msgid ""
"For this specific case, you could also use ``value = dict.setdefault(key, "
"getvalue(key))``, but only if the ``getvalue()`` call is cheap enough "
"because it is evaluated in all cases."
msgstr ""
"單就這個情況來說，你也可以用 ``value = dict.setdefault(key, "
"getvalue(key))``，不過只有在 ``getvalue()`` 代價不大的時候才能用，畢竟他每次"
"都會被執行。"

#: ../../faq/design.rst:259
msgid "Why isn't there a switch or case statement in Python?"
msgstr "為什麼 Python 內沒有 switch 或 case 陳述式？"

#: ../../faq/design.rst:261
msgid ""
"You can do this easily enough with a sequence of ``if... elif... elif... "
"else``. For literal values, or constants within a namespace, you can also "
"use a ``match ... case`` statement."
msgstr ""
"你可以用一連串的 ``if... elif... elif... else`` 來輕易達成相同的效果。對於單"
"純的值或是在命名空間內的常數，你也可以使用 ``match ... case`` 陳述式。"

#: ../../faq/design.rst:265
msgid ""
"For cases where you need to choose from a very large number of "
"possibilities, you can create a dictionary mapping case values to functions "
"to call.  For example::"
msgstr ""
"如果可能性很多，你可以用字典去映射要呼叫的函式。舉例來說：\n"
"\n"
"::"

#: ../../faq/design.rst:276
msgid ""
"For calling methods on objects, you can simplify yet further by using the :"
"func:`getattr` built-in to retrieve methods with a particular name::"
msgstr ""
"對於呼叫物件裡的方法，你可以利用內建用來找尋特定方法的函式 :func:`getattr` 來"
"做進一步的簡化：\n"
"\n"
"::"

#: ../../faq/design.rst:288
msgid ""
"It's suggested that you use a prefix for the method names, such as "
"``visit_`` in this example.  Without such a prefix, if values are coming "
"from an untrusted source, an attacker would be able to call any method on "
"your object."
msgstr ""
"我們建議在方法名稱加上前綴，以這個例子來說是 像是 ``visit_``。沒有前綴的話，"
"一旦收到從不信任來源的值，攻擊者便可以隨意呼叫在你的專案內的方法。"

#: ../../faq/design.rst:294
msgid ""
"Can't you emulate threads in the interpreter instead of relying on an OS-"
"specific thread implementation?"
msgstr "為何不能在直譯器上模擬執行緒，而要使用作業系統的特定實作方式？"

#: ../../faq/design.rst:296
msgid ""
"Answer 1: Unfortunately, the interpreter pushes at least one C stack frame "
"for each Python stack frame.  Also, extensions can call back into Python at "
"almost random moments.  Therefore, a complete threads implementation "
"requires thread support for C."
msgstr ""
"答案一：很不幸地，直譯器對每個 Python 的堆疊框 (stack frame) 會推至少一個 C "
"的堆疊框。同時，擴充套件可以隨時呼叫 Python，因此完整的實作必須要支援 C 的執"
"行緒。"

#: ../../faq/design.rst:301
msgid ""
"Answer 2: Fortunately, there is `Stackless Python <https://github.com/"
"stackless-dev/stackless/wiki>`_, which has a completely redesigned "
"interpreter loop that avoids the C stack."
msgstr ""
"答案二：幸運地，`無堆疊 (Stackless) Python <https://github.com/stackless-dev/"
"stackless/wiki>`_ 完全重新設計了直譯器迴圈，並避免了 C 堆疊。"

#: ../../faq/design.rst:306
msgid "Why can't lambda expressions contain statements?"
msgstr "為何 lambda 運算式不能包含陳述式？"

#: ../../faq/design.rst:308
msgid ""
"Python lambda expressions cannot contain statements because Python's "
"syntactic framework can't handle statements nested inside expressions.  "
"However, in Python, this is not a serious problem.  Unlike lambda forms in "
"other languages, where they add functionality, Python lambdas are only a "
"shorthand notation if you're too lazy to define a function."
msgstr ""
"Python 的 lambda 運算式不能包含陳述式是因為 Python 的語法框架無法處理包在運算"
"式中的陳述式。然而，在 Python 裡這並不是一個嚴重的問題。不像在其他語言中有獨"
"立功能的 lambda，Python 的 lambda 只是一個在你懶得定義函式時可用的一個簡寫表"
"達法。"

#: ../../faq/design.rst:314
msgid ""
"Functions are already first class objects in Python, and can be declared in "
"a local scope.  Therefore the only advantage of using a lambda instead of a "
"locally defined function is that you don't need to invent a name for the "
"function -- but that's just a local variable to which the function object "
"(which is exactly the same type of object that a lambda expression yields) "
"is assigned!"
msgstr ""
"函式已經是 Python 裡的一級物件 (first class objects)，而且可以在區域範圍內被"
"宣告。因此唯一用 lambda 而非區域性的函式的優點就是你不需要多想一個函式名稱 — "
"但這樣就會是一個區域變數被指定成函數物件（和 lambda 運算式的結果同類）！"

#: ../../faq/design.rst:322
msgid "Can Python be compiled to machine code, C or some other language?"
msgstr "Python 可以被編譯成機器語言或 C 語言或其他種語言嗎?"

#: ../../faq/design.rst:324
msgid ""
"`Cython <http://cython.org/>`_ compiles a modified version of Python with "
"optional annotations into C extensions.  `Nuitka <http://www.nuitka.net/>`_ "
"is an up-and-coming compiler of Python into C++ code, aiming to support the "
"full Python language."
msgstr ""
"`Cython <http://cython.org/>`_ 可以編譯一個調整過有選擇性註解的 Python 版"
"本。 `Nuitka <http://www.nuitka.net/>`_ 是一個有潛力編譯器，可以把 Python 編"
"譯成 C++，他的目標是支援完整的 Python 語言。"

#: ../../faq/design.rst:331
msgid "How does Python manage memory?"
msgstr "Python 如何管理記憶體?"

#: ../../faq/design.rst:333
msgid ""
"The details of Python memory management depend on the implementation.  The "
"standard implementation of Python, :term:`CPython`, uses reference counting "
"to detect inaccessible objects, and another mechanism to collect reference "
"cycles, periodically executing a cycle detection algorithm which looks for "
"inaccessible cycles and deletes the objects involved. The :mod:`gc` module "
"provides functions to perform a garbage collection, obtain debugging "
"statistics, and tune the collector's parameters."
msgstr ""
"Python 記憶體管理的細節取決於實作。Python 的標準實作 :term:`CPython` 使用參照"
"計次 (reference counting) 來偵測不再被存取的物件，並用另一個機制來收集參照循"
"環 (reference cycle)、定期執行循環偵測演算法來找不再使用的循環並刪除相關物"
"件。 :mod:`gc` 模組提供了可以執行垃圾收集、抓取除錯統計數據和調整收集器參數的"
"函式。"

#: ../../faq/design.rst:341
msgid ""
"Other implementations (such as `Jython <http://www.jython.org>`_ or `PyPy "
"<http://www.pypy.org>`_), however, can rely on a different mechanism such as "
"a full-blown garbage collector.  This difference can cause some subtle "
"porting problems if your Python code depends on the behavior of the "
"reference counting implementation."
msgstr ""
"然而，在其他實作（像是 `Jython <http://www.jython.org>`_ 或 `PyPy <http://"
"www.pypy.org>`_）中，會使用像是成熟的垃圾收集器等不同機制。如果你的 Python 程"
"式碼的表現取決於參照計次 (reference counting) 的實作，這個相異處會導致一些微"
"小的移植問題。"

#: ../../faq/design.rst:347
msgid ""
"In some Python implementations, the following code (which is fine in "
"CPython) will probably run out of file descriptors::"
msgstr ""
"在一些 Python 實作中，下面這段程式碼（在 CPython 可以正常運作）可能會把檔案描"
"述子 (file descriptors) 用盡：\n"
"\n"
"::"

#: ../../faq/design.rst:354
msgid ""
"Indeed, using CPython's reference counting and destructor scheme, each new "
"assignment to *f* closes the previous file.  With a traditional GC, however, "
"those file objects will only get collected (and closed) at varying and "
"possibly long intervals."
msgstr ""
"實際上，使用 CPython 的參照計次 (reference counting) 和解構方案 (destructor "
"scheme)，每個對 *f* 的新指派都會關閉前面打開的檔案。然而用傳統的垃圾回收 "
"(GC) 的話，這些檔案物件只會在不固定且有可能很長的時間後被收集（並關閉）。"

#: ../../faq/design.rst:359
msgid ""
"If you want to write code that will work with any Python implementation, you "
"should explicitly close the file or use the :keyword:`with` statement; this "
"will work regardless of memory management scheme::"
msgstr ""
"如果你希望你的程式碼在任何 Python 實作版本中都可以運作，那你應該清楚地關閉檔"
"案或是使用 :keyword:`with` 陳述句，如此一來，不用管記憶體管理的方法，他也會正"
"常運作：\n"
"\n"
"::"

#: ../../faq/design.rst:369
msgid "Why doesn't CPython use a more traditional garbage collection scheme?"
msgstr "為何 CPython 不使用更多傳統的垃圾回收機制?"

#: ../../faq/design.rst:371
msgid ""
"For one thing, this is not a C standard feature and hence it's not portable. "
"(Yes, we know about the Boehm GC library.  It has bits of assembler code for "
"*most* common platforms, not for all of them, and although it is mostly "
"transparent, it isn't completely transparent; patches are required to get "
"Python to work with it.)"
msgstr ""
"第一，這並不是 C 的標準功能，因此他的可攜性低。（對，我們知道 Boehm GC 函式"
"庫。他有可相容於*大多數*平台的組合語言程式碼，但依然不是全部，而即便它大多數"
"是通透的，也並不完全，要讓它跟 Python 相容還是需要做一些修補。）"

#: ../../faq/design.rst:377
msgid ""
"Traditional GC also becomes a problem when Python is embedded into other "
"applications.  While in a standalone Python it's fine to replace the "
"standard malloc() and free() with versions provided by the GC library, an "
"application embedding Python may want to have its *own* substitute for "
"malloc() and free(), and may not want Python's.  Right now, CPython works "
"with anything that implements malloc() and free() properly."
msgstr ""
"傳統的垃圾收集 (GC) 在 Python 被嵌入其他應用程式時也成了一個問題。在獨立的 "
"Python 程式裡當然可以把標準的 malloc() 和 free() 換成 GC 函式庫提供的其他版"
"本；但一個嵌著 Python 的應用程式可能想用*自己*的 malloc() 和 free() 替代品，"
"而不是用 Python 的。以現在來說，CPython 和實作 malloc() 和 free() 的程式相處"
"融洽。"

#: ../../faq/design.rst:386
msgid "Why isn't all memory freed when CPython exits?"
msgstr "當 CPython 結束時，為何所有的記憶體不會被釋放?"

#: ../../faq/design.rst:388
msgid ""
"Objects referenced from the global namespaces of Python modules are not "
"always deallocated when Python exits.  This may happen if there are circular "
"references.  There are also certain bits of memory that are allocated by the "
"C library that are impossible to free (e.g. a tool like Purify will complain "
"about these).  Python is, however, aggressive about cleaning up memory on "
"exit and does try to destroy every single object."
msgstr ""
"當離開 Python 時，從 Python 模組的全域命名空間來的物件並非總是會被釋放。在有"
"循環引用的時候，這可能會發生。有些記憶體是被 C 函式庫取用的，他們不可能被釋放"
"（例如：像是 Purify 之類的工具會抱怨）。然而，Python 在關閉的時候會積極清理記"
"憶體並嘗試刪除每個物件。"

#: ../../faq/design.rst:395
msgid ""
"If you want to force Python to delete certain things on deallocation use "
"the :mod:`atexit` module to run a function that will force those deletions."
msgstr ""
"如果你想要強迫 Python 在釋放記憶體時刪除特定的東西，你可以用 :mod:`atexit` 模"
"組來執行會強制刪除的函式。"

#: ../../faq/design.rst:400
msgid "Why are there separate tuple and list data types?"
msgstr ""

#: ../../faq/design.rst:402
msgid ""
"Lists and tuples, while similar in many respects, are generally used in "
"fundamentally different ways.  Tuples can be thought of as being similar to "
"Pascal records or C structs; they're small collections of related data which "
"may be of different types which are operated on as a group.  For example, a "
"Cartesian coordinate is appropriately represented as a tuple of two or three "
"numbers."
msgstr ""

#: ../../faq/design.rst:409
msgid ""
"Lists, on the other hand, are more like arrays in other languages.  They "
"tend to hold a varying number of objects all of which have the same type and "
"which are operated on one-by-one.  For example, ``os.listdir('.')`` returns "
"a list of strings representing the files in the current directory.  "
"Functions which operate on this output would generally not break if you "
"added another file or two to the directory."
msgstr ""

#: ../../faq/design.rst:416
msgid ""
"Tuples are immutable, meaning that once a tuple has been created, you can't "
"replace any of its elements with a new value.  Lists are mutable, meaning "
"that you can always change a list's elements.  Only immutable elements can "
"be used as dictionary keys, and hence only tuples and not lists can be used "
"as keys."
msgstr ""

#: ../../faq/design.rst:423
msgid "How are lists implemented in CPython?"
msgstr "串列 (lists) 在 CPython 中是怎麼實作的？"

#: ../../faq/design.rst:425
msgid ""
"CPython's lists are really variable-length arrays, not Lisp-style linked "
"lists. The implementation uses a contiguous array of references to other "
"objects, and keeps a pointer to this array and the array's length in a list "
"head structure."
msgstr ""

#: ../../faq/design.rst:429
msgid ""
"This makes indexing a list ``a[i]`` an operation whose cost is independent "
"of the size of the list or the value of the index."
msgstr ""

#: ../../faq/design.rst:432
msgid ""
"When items are appended or inserted, the array of references is resized.  "
"Some cleverness is applied to improve the performance of appending items "
"repeatedly; when the array must be grown, some extra space is allocated so "
"the next few times don't require an actual resize."
msgstr ""

#: ../../faq/design.rst:439
msgid "How are dictionaries implemented in CPython?"
msgstr "字典 (dictionaries) 在 CPython 中是怎麼實作的？"

#: ../../faq/design.rst:441
msgid ""
"CPython's dictionaries are implemented as resizable hash tables.  Compared "
"to B-trees, this gives better performance for lookup (the most common "
"operation by far) under most circumstances, and the implementation is "
"simpler."
msgstr ""

#: ../../faq/design.rst:445
msgid ""
"Dictionaries work by computing a hash code for each key stored in the "
"dictionary using the :func:`hash` built-in function.  The hash code varies "
"widely depending on the key and a per-process seed; for example, \"Python\" "
"could hash to -539294296 while \"python\", a string that differs by a single "
"bit, could hash to 1142331976.  The hash code is then used to calculate a "
"location in an internal array where the value will be stored.  Assuming that "
"you're storing keys that all have different hash values, this means that "
"dictionaries take constant time -- O(1), in Big-O notation -- to retrieve a "
"key."
msgstr ""

#: ../../faq/design.rst:456
msgid "Why must dictionary keys be immutable?"
msgstr ""

#: ../../faq/design.rst:458
msgid ""
"The hash table implementation of dictionaries uses a hash value calculated "
"from the key value to find the key.  If the key were a mutable object, its "
"value could change, and thus its hash could also change.  But since whoever "
"changes the key object can't tell that it was being used as a dictionary "
"key, it can't move the entry around in the dictionary.  Then, when you try "
"to look up the same object in the dictionary it won't be found because its "
"hash value is different. If you tried to look up the old value it wouldn't "
"be found either, because the value of the object found in that hash bin "
"would be different."
msgstr ""

#: ../../faq/design.rst:467
msgid ""
"If you want a dictionary indexed with a list, simply convert the list to a "
"tuple first; the function ``tuple(L)`` creates a tuple with the same entries "
"as the list ``L``.  Tuples are immutable and can therefore be used as "
"dictionary keys."
msgstr ""

#: ../../faq/design.rst:471
msgid "Some unacceptable solutions that have been proposed:"
msgstr ""

#: ../../faq/design.rst:473
msgid ""
"Hash lists by their address (object ID).  This doesn't work because if you "
"construct a new list with the same value it won't be found; e.g.::"
msgstr ""

#: ../../faq/design.rst:479
msgid ""
"would raise a :exc:`KeyError` exception because the id of the ``[1, 2]`` "
"used in the second line differs from that in the first line.  In other "
"words, dictionary keys should be compared using ``==``, not using :keyword:"
"`is`."
msgstr ""

#: ../../faq/design.rst:483
msgid ""
"Make a copy when using a list as a key.  This doesn't work because the list, "
"being a mutable object, could contain a reference to itself, and then the "
"copying code would run into an infinite loop."
msgstr ""

#: ../../faq/design.rst:487
msgid ""
"Allow lists as keys but tell the user not to modify them.  This would allow "
"a class of hard-to-track bugs in programs when you forgot or modified a list "
"by accident. It also invalidates an important invariant of dictionaries: "
"every value in ``d.keys()`` is usable as a key of the dictionary."
msgstr ""

#: ../../faq/design.rst:492
msgid ""
"Mark lists as read-only once they are used as a dictionary key.  The problem "
"is that it's not just the top-level object that could change its value; you "
"could use a tuple containing a list as a key.  Entering anything as a key "
"into a dictionary would require marking all objects reachable from there as "
"read-only -- and again, self-referential objects could cause an infinite "
"loop."
msgstr ""

#: ../../faq/design.rst:498
msgid ""
"There is a trick to get around this if you need to, but use it at your own "
"risk: You can wrap a mutable structure inside a class instance which has "
"both a :meth:`__eq__` and a :meth:`__hash__` method.  You must then make "
"sure that the hash value for all such wrapper objects that reside in a "
"dictionary (or other hash based structure), remain fixed while the object is "
"in the dictionary (or other structure). ::"
msgstr ""

#: ../../faq/design.rst:522
msgid ""
"Note that the hash computation is complicated by the possibility that some "
"members of the list may be unhashable and also by the possibility of "
"arithmetic overflow."
msgstr ""

#: ../../faq/design.rst:526
msgid ""
"Furthermore it must always be the case that if ``o1 == o2`` (ie ``o1."
"__eq__(o2) is True``) then ``hash(o1) == hash(o2)`` (ie, ``o1.__hash__() == "
"o2.__hash__()``), regardless of whether the object is in a dictionary or "
"not.  If you fail to meet these restrictions dictionaries and other hash "
"based structures will misbehave."
msgstr ""

#: ../../faq/design.rst:531
msgid ""
"In the case of ListWrapper, whenever the wrapper object is in a dictionary "
"the wrapped list must not change to avoid anomalies.  Don't do this unless "
"you are prepared to think hard about the requirements and the consequences "
"of not meeting them correctly.  Consider yourself warned."
msgstr ""

#: ../../faq/design.rst:538
msgid "Why doesn't list.sort() return the sorted list?"
msgstr "為何list.sort()不是回傳排序過的串列?"

#: ../../faq/design.rst:540
msgid ""
"In situations where performance matters, making a copy of the list just to "
"sort it would be wasteful. Therefore, :meth:`list.sort` sorts the list in "
"place. In order to remind you of that fact, it does not return the sorted "
"list.  This way, you won't be fooled into accidentally overwriting a list "
"when you need a sorted copy but also need to keep the unsorted version "
"around."
msgstr ""

#: ../../faq/design.rst:546
msgid ""
"If you want to return a new list, use the built-in :func:`sorted` function "
"instead.  This function creates a new list from a provided iterable, sorts "
"it and returns it.  For example, here's how to iterate over the keys of a "
"dictionary in sorted order::"
msgstr ""

#: ../../faq/design.rst:556
msgid "How do you specify and enforce an interface spec in Python?"
msgstr ""

#: ../../faq/design.rst:558
msgid ""
"An interface specification for a module as provided by languages such as C++ "
"and Java describes the prototypes for the methods and functions of the "
"module.  Many feel that compile-time enforcement of interface specifications "
"helps in the construction of large programs."
msgstr ""

#: ../../faq/design.rst:563
msgid ""
"Python 2.6 adds an :mod:`abc` module that lets you define Abstract Base "
"Classes (ABCs).  You can then use :func:`isinstance` and :func:`issubclass` "
"to check whether an instance or a class implements a particular ABC.  The :"
"mod:`collections.abc` module defines a set of useful ABCs such as :class:"
"`~collections.abc.Iterable`, :class:`~collections.abc.Container`, and :class:"
"`~collections.abc.MutableMapping`."
msgstr ""

#: ../../faq/design.rst:570
msgid ""
"For Python, many of the advantages of interface specifications can be "
"obtained by an appropriate test discipline for components."
msgstr ""

#: ../../faq/design.rst:573
msgid ""
"A good test suite for a module can both provide a regression test and serve "
"as a module interface specification and a set of examples.  Many Python "
"modules can be run as a script to provide a simple \"self test.\"  Even "
"modules which use complex external interfaces can often be tested in "
"isolation using trivial \"stub\" emulations of the external interface.  The :"
"mod:`doctest` and :mod:`unittest` modules or third-party test frameworks can "
"be used to construct exhaustive test suites that exercise every line of code "
"in a module."
msgstr ""

#: ../../faq/design.rst:581
msgid ""
"An appropriate testing discipline can help build large complex applications "
"in Python as well as having interface specifications would.  In fact, it can "
"be better because an interface specification cannot test certain properties "
"of a program.  For example, the :meth:`append` method is expected to add new "
"elements to the end of some internal list; an interface specification cannot "
"test that your :meth:`append` implementation will actually do this "
"correctly, but it's trivial to check this property in a test suite."
msgstr ""

#: ../../faq/design.rst:589
msgid ""
"Writing test suites is very helpful, and you might want to design your code "
"to make it easily tested. One increasingly popular technique, test-driven "
"development, calls for writing parts of the test suite first, before you "
"write any of the actual code.  Of course Python allows you to be sloppy and "
"not write test cases at all."
msgstr ""

#: ../../faq/design.rst:597
msgid "Why is there no goto?"
msgstr "為何沒有goto語法?"

#: ../../faq/design.rst:599
msgid ""
"In the 1970s people realized that unrestricted goto could lead to messy "
"\"spaghetti\" code that was hard to understand and revise. In a high-level "
"language, it is also unneeded as long as there are ways to branch (in "
"Python, with ``if`` statements and ``or``, ``and``, and ``if-else`` "
"expressions) and loop (with ``while`` and ``for`` statements, possibly "
"containing ``continue`` and ``break``)."
msgstr ""

#: ../../faq/design.rst:606
msgid ""
"One can also use exceptions to provide a \"structured goto\" that works even "
"across function calls.  Many feel that exceptions can conveniently emulate "
"all reasonable uses of the \"go\" or \"goto\" constructs of C, Fortran, and "
"other languages.  For example::"
msgstr ""

#: ../../faq/design.rst:622
msgid ""
"This doesn't allow you to jump into the middle of a loop, but that's usually "
"considered an abuse of goto anyway.  Use sparingly."
msgstr ""

#: ../../faq/design.rst:627
msgid "Why can't raw strings (r-strings) end with a backslash?"
msgstr ""

#: ../../faq/design.rst:629
msgid ""
"More precisely, they can't end with an odd number of backslashes: the "
"unpaired backslash at the end escapes the closing quote character, leaving "
"an unterminated string."
msgstr ""

#: ../../faq/design.rst:633
msgid ""
"Raw strings were designed to ease creating input for processors (chiefly "
"regular expression engines) that want to do their own backslash escape "
"processing. Such processors consider an unmatched trailing backslash to be "
"an error anyway, so raw strings disallow that.  In return, they allow you to "
"pass on the string quote character by escaping it with a backslash.  These "
"rules work well when r-strings are used for their intended purpose."
msgstr ""

#: ../../faq/design.rst:640
msgid ""
"If you're trying to build Windows pathnames, note that all Windows system "
"calls accept forward slashes too::"
msgstr ""

#: ../../faq/design.rst:645
msgid ""
"If you're trying to build a pathname for a DOS command, try e.g. one of ::"
msgstr ""

#: ../../faq/design.rst:653
msgid "Why doesn't Python have a \"with\" statement for attribute assignments?"
msgstr ""

#: ../../faq/design.rst:655
msgid ""
"Python has a 'with' statement that wraps the execution of a block, calling "
"code on the entrance and exit from the block.  Some languages have a "
"construct that looks like this::"
msgstr ""

#: ../../faq/design.rst:663
msgid "In Python, such a construct would be ambiguous."
msgstr ""

#: ../../faq/design.rst:665
msgid ""
"Other languages, such as Object Pascal, Delphi, and C++, use static types, "
"so it's possible to know, in an unambiguous way, what member is being "
"assigned to. This is the main point of static typing -- the compiler "
"*always* knows the scope of every variable at compile time."
msgstr ""

#: ../../faq/design.rst:670
msgid ""
"Python uses dynamic types. It is impossible to know in advance which "
"attribute will be referenced at runtime. Member attributes may be added or "
"removed from objects on the fly. This makes it impossible to know, from a "
"simple reading, what attribute is being referenced: a local one, a global "
"one, or a member attribute?"
msgstr ""

#: ../../faq/design.rst:676
msgid "For instance, take the following incomplete snippet::"
msgstr ""

#: ../../faq/design.rst:682
msgid ""
"The snippet assumes that \"a\" must have a member attribute called \"x\".  "
"However, there is nothing in Python that tells the interpreter this. What "
"should happen if \"a\" is, let us say, an integer?  If there is a global "
"variable named \"x\", will it be used inside the with block?  As you see, "
"the dynamic nature of Python makes such choices much harder."
msgstr ""

#: ../../faq/design.rst:688
msgid ""
"The primary benefit of \"with\" and similar language features (reduction of "
"code volume) can, however, easily be achieved in Python by assignment.  "
"Instead of::"
msgstr ""

#: ../../faq/design.rst:695
msgid "write this::"
msgstr ""

#: ../../faq/design.rst:702
msgid ""
"This also has the side-effect of increasing execution speed because name "
"bindings are resolved at run-time in Python, and the second version only "
"needs to perform the resolution once."
msgstr ""

#: ../../faq/design.rst:708
msgid "Why don't generators support the with statement?"
msgstr ""

#: ../../faq/design.rst:710
msgid ""
"For technical reasons, a generator used directly as a context manager would "
"not work correctly.  When, as is most common, a generator is used as an "
"iterator run to completion, no closing is needed.  When it is, wrap it as "
"\"contextlib.closing(generator)\" in the 'with' statement."
msgstr ""

#: ../../faq/design.rst:717
msgid "Why are colons required for the if/while/def/class statements?"
msgstr ""

#: ../../faq/design.rst:719
msgid ""
"The colon is required primarily to enhance readability (one of the results "
"of the experimental ABC language).  Consider this::"
msgstr ""

#: ../../faq/design.rst:725
msgid "versus ::"
msgstr ""

#: ../../faq/design.rst:730
msgid ""
"Notice how the second one is slightly easier to read.  Notice further how a "
"colon sets off the example in this FAQ answer; it's a standard usage in "
"English."
msgstr ""

#: ../../faq/design.rst:733
msgid ""
"Another minor reason is that the colon makes it easier for editors with "
"syntax highlighting; they can look for colons to decide when indentation "
"needs to be increased instead of having to do a more elaborate parsing of "
"the program text."
msgstr ""

#: ../../faq/design.rst:739
msgid "Why does Python allow commas at the end of lists and tuples?"
msgstr ""

#: ../../faq/design.rst:741
msgid ""
"Python lets you add a trailing comma at the end of lists, tuples, and "
"dictionaries::"
msgstr ""

#: ../../faq/design.rst:752
msgid "There are several reasons to allow this."
msgstr "這有許多原因可被允許。"

#: ../../faq/design.rst:754
msgid ""
"When you have a literal value for a list, tuple, or dictionary spread across "
"multiple lines, it's easier to add more elements because you don't have to "
"remember to add a comma to the previous line.  The lines can also be "
"reordered without creating a syntax error."
msgstr ""

#: ../../faq/design.rst:759
msgid ""
"Accidentally omitting the comma can lead to errors that are hard to "
"diagnose. For example::"
msgstr ""

#: ../../faq/design.rst:769
msgid ""
"This list looks like it has four elements, but it actually contains three: "
"\"fee\", \"fiefoo\" and \"fum\".  Always adding the comma avoids this source "
"of error."
msgstr ""

#: ../../faq/design.rst:772
msgid ""
"Allowing the trailing comma may also make programmatic code generation "
"easier."
msgstr ""
